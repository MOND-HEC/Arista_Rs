---
title: "hector"
format: html
output-file: index
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

---
title: "Untitled"
format: html
output-file: index
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

|                                                                                                                                                           |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------|
| title: "como usar quarto" author: "Hector Stalin Arista Fernandez" format: html: toc: true toc-location: left number-sections: true embed_resources: true |

# Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the *Render* button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

{r} 1 + 1

You can add options to executable code like this

{r} #\| echo: false 2 \* 2

The echo: false option disables the printing of code (only output is displayed).

# como usar quarto?

## fuentes

-   negrita: *esto es fuente negrita*
-   cursiva: *solanum tuberosum*

## formulas matematicas

Area de una circunferencia $Area_{circunferencia}=pi.r^2$

esta es una formula cualquiera $$k=\frac{\left(2x-1\right)^2-1}{4}"$$

# Mi primera pagina web

1.  Tener mi proyecto
2.  Conectar mi proyecto a GitHub
3.  Tener un archivo en formato html llamado 'index.html'
4.  Activas GitHub Pages

|                                                                                                                                                                       |
|----------------------------------------------------------------------------------------------------------------------------------------------------------------------:|
| title: "como usar quarto" author: "Hector Arista Fernandez" format: html: toc: true toc-location: left number-sections: true embed_resources: true output-file: index |

\# Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the *Render* button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

{r} 1 + 1

You can add options to executable code like this

{r} #\| echo: false 2 \* 2

The echo: false option disables the printing of code (only output is displayed).

# como usar quarto?

## fuentes

-   negrita: *esto es fuente negrita*
    -   cursiva: *solanum tuberosum*

## formulas matematicas

Area de una circunferencia $Area_{circunferencia}=pi.r^2$

esta es una formula cualquiera $$k=\frac{\left(2x-1\right)^2-1}{4}"$$

# Mi primera pagina web

1.  Tener mi proyecto
2.  Conectar mi proyecto a GitHub
3.  Tener un archivo en formato html llamado 'index.html'
4.  hacer puch al repositor
5.  Activas GitHub Pages

#IMPORTAR ARCHIVO

```{r}
source('https://inkaverse.com/setup.r')
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"

gs <- url %>% 
  as_sheets_id()
gs4_auth()
fb <- gs %>% 
  range_read("fb")
str(fb)
modelo <- aov(formula = lfa ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)

```

# Box plot

```{r}
ggplot(fb, aes(x = geno, y = lfa, colour = riego)) +
  geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
  labs(title = "boxplot con interacción de niveles de riego y genotipo" , 
       x = "Interacción Riego y Genotipo",
       y = "Valor de la variable respuesta") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  #Inclinar etiquetas del eje x
```

```{r}
modelo <- aov(formula = hi ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)

```

# modelo lineal

```{r}
library(lme4)
modelo <- lme4::lmer(formula = lfa ~ riego + geno + riego*geno + (1|bloque)
              ,data = fb)
anova(modelo)
plot(modelo)


```

```{r}
library(inti)
names(fb) 
str(fb)
model <- remove_outliers(
  data = fb, 
  formula = lfa ~ riego + geno + riego*geno + (1|bloque), 
  plot_diag = TRUE 
)
model
```

\# coparacion de medias

```{r}
modelo <- lm(formula = lfa ~ bloque + riego + geno + riego * geno, data = fb)

anova(modelo)

library(agricolae)

tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)

print(tukey_result)

plot(tukey_result)
```

```{r}
tukey_result

grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
# Cargar las bibliotecas necesarias
library(agricolae)
library(ggplot2)
library(dplyr)
library(tidyr)

# Ajustar el modelo lineal
modelo <- lm(formula = lfa ~ bloque + riego + geno + riego * geno, data = fb)

# Obtener el resultado de Tukey
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)

# Crear un dataframe con los grupos y separar los tratamientos
grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")

# Verificar la estructura del dataframe y los nombres de las columnas
str(grupos)
print(colnames(grupos))  # Verificar nombres de columnas

# Crear el gráfico de barras
ggplot(grupos, aes(x = geno, y = lfa, fill = riego)) +  # Asegúrate de que "LFA" sea el nombre correcto
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +
  labs(title = "Comparación de Medias - Prueba de Tukey", 
       x = "Genotipos", 
       y = "FTL") +
  theme_minimal() +
  theme(legend.title = element_blank()) +
  scale_fill_discrete(name = "Riego")
```

```{r}
ggplot(grupos, aes(x = geno, y = lfa, fill = riego)) + 
  geom_bar(stat = "identity", position = "dodge", color = "black") + 
  labs(x = "Genotipo", y = "LFA", fill = "Riego") + 
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  ggtitle("Gráfico de barras: LFA por genotipo y riego") +
  geom_text(aes(label = groups), 
            position = position_dodge(0.9), 
            vjust = -0.5)  # Ajusta la posición vertical de las letras
```

```{r}
library(lme4)
modelo <- lme4::lmer(formula = hi ~ riego + geno + riego*geno + (1|bloque)
              ,data = fb)
anova(modelo)
```

#emmeans: Comparacion de medias

```{r}
library(emmeans)

# Comparaciones de medias para geno dentro de cada nivel de riego
cm_geno <- emmeans(modelo, ~ geno | riego)
cm_geno  # Muestra los resultados

# Comparaciones de medias para riego dentro de cada nivel de geno
```

#Grafico

```{r}
library(ggplot2)
library(emmeans)
modelo <- lm(lfa ~ bloque + riego + geno + riego * geno, data = fb)
cm1 <- emmeans(modelo, ~ geno | riego)
cm1_df <- as.data.frame(cm1)
ggplot(cm1_df, aes(x = geno, y = emmean, color = riego, group = riego)) +
  geom_line() +
  geom_point(size = 3) +  
  geom_text(aes(label = round(emmean, 2)),  
            vjust = -0.5, size = 3.5) +  
  labs(x = "Genotipo", y = "Media marginal ajustada", color = "Riego") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle("Medias marginales ajustadas por genotipo y riego")

```

```{r}


```

```{r}
# Análisis multivariado
str(fb)

```

```{r}
# Instalar el paquete psych si aún no está instalado
if (!require(psych)) install.packages("psych")

# Cargar los paquetes necesarios
library(tidyverse)
library(psych)
library(corrplot)

# Seleccionar solo las columnas numéricas
fb_clean <- fb %>%
  select_if(is.numeric)

# Generar la matriz de correlación usando pairs.panels
pairs.panels(
  fb_clean,
  hist.col = "red",
  pch = 21,
  stars = TRUE,
  scale = FALSE,
  lm = TRUE
)


```

#PCA: Annalists de componentes Principales

```{r}
# Cargar la librería FactoMineR
library(FactoMineR)
library(dplyr)  # Para la manipulación de datos
library(ggplot2) # Para graficar

# Agrupar y resumir los datos
mv <- fb %>%
  group_by(riego, geno) %>%
  summarise(across(where(is.numeric), ~ mean(., na.rm = TRUE), .names = "mean_{col}")) %>%
  ungroup()  # Desagrupar los datos después de resumir

# Realizar el PCA
pca_result <- PCA(mv, scale.unit = TRUE, quali.sup = c(1:4), graph = FALSE)

# Graficar los individuos
p1 <- plot(pca_result, habillage = 1)

# Graficar las variables
p2 <- plot(pca_result, choix = "var")

# Combinar las gráficas en una sola
library(gridExtra)  # Para combinar gráficos
gridExtra::grid.arrange(p1, p2, nrow = 1)


```
