---
title: "UNIDA_2"
author: "Hector Arista, Alexander Santillan, Lili Barbosa, Alejandro Mendoza."
format: html
output-file: index
editor: visual
---

#Este es el trabajo de la página web para la 2da unidad, realizado por el grupo integrado por Hector Arista, Alexander Santillan, Lili Barbosa y Alejandro Mendoza.

# Importar Archivo 1

```{r}
source('https://inkaverse.com/setup.r')
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"

gs <- url %>% 
  as_sheets_id()
gs4_auth()
fb <- gs %>% 
  range_read("fb")
str(fb)
modelo <- aov(formula = lfa ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)
plot(modelo)
```

## variable op_84

### Modelo Lineal(Método estadístico que describe la relación lineal entre una variable dependiente y una o más variables independientes.)

```{r}
modelo <- aov(formula = op_84 ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)
```

### Boxplot(Gráfico que resume la distribución de datos usando la mediana, los cuartiles y valores atípicos.)

```{r}
ggplot(fb, aes(x = geno, y = op_84, colour = riego)) +
  geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Boxplot con interacción de niveles de riego y genotipo", 
       x = "Interacción Riego y Genotipo",
       y = "Valor de la variable respuesta") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

### Modelo Lineal Mixto para op_84 (Modelo que incluye tanto efectos fijos (constantes) como efectos aleatorios (variables por grupo o individuo).)

```{r}
library(lme4)
modelo <- lmer(formula = op_84 ~ riego + geno + riego*geno + (1|bloque), data = fb)
anova(modelo)
plot(modelo)

ol <- boxplot(op_84 ~ riego * geno, data = fb)
ol

library(inti)
model <- remove_outliers(data = fb,
                         formula = spad_29 ~ riego + geno + riego*geno + (1|bloque),
                         plot_diag = TRUE)
model
```

### Comparacion de Medias (Pruebas estadísticas para identificar diferencias significativas entre medias de diferentes grupos.)

```{r}
modelo <- aov(formula = op_84 ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
```

### Duncan (Prueba de comparación de medias que ajusta el nivel de significancia para múltiples comparaciones, menos conservadora que Tukey.)

```{r}
library(agricolae)
library(agricolae)
library(agricolae)

# Ejecutar el test de Duncan
duncan_riego_geno <- duncan.test(modelo, trt = c("riego","geno"), group = TRUE)
print(duncan_riego_geno)

# Verificar si existen grupos formados
if (!is.null(duncan_riego_geno$groups)) {
  # Modificar las etiquetas de la columna de grupos para mostrar solo las primeras 2 letras
  duncan_riego_geno$groups <- duncan_riego_geno$groups %>%
    dplyr::mutate(groups = substr(groups, 1, 2))  # Mostrar solo las 3 primeras letras de la etiqueta
  
  # Graficar
  plot(duncan_riego_geno)
} else {
  cat("No se puede graficar, no hay grupos formados.")
}
```

###Tukey (Prueba de comparación de medias que controla el error en múltiples comparaciones, útil en ANOVA.)

```{r}
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)
print(tukey_result)

# Verificar si existen grupos formados
if (!is.null(tukey_result$groups)) {
  # Modificar los indicadores de diferenciación para mostrar solo las primeras 2 letras
  tukey_result$groups$groups <- substr(tukey_result$groups$groups, 1, 2)
  
  # Graficar
  plot(tukey_result)
} else {
  cat("No se puede graficar, no hay grupos formados.")
}
```

```{r}
tukey_result
library(tidyverse)

grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
```

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)

ggplot(grupos, aes(x = geno, y = op_84 , fill = riego)) + 
  geom_bar(stat = "identity", position = "dodge", color = "black") + 
  labs(x = "Genotipo", y = "spad_29", fill = "Riego") + 
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  ggtitle("Gráfico de barras: op_84 por genotipo y riego") +
  geom_text(aes(label = substr(geno, 1, 2)),  # Mostrar solo las primeras 2 letras de la columna 'geno'
            position = position_dodge(0.9), 
            vjust = -0.5)  # Ajusta la posición vertical de las letras

```

### Emmeans: Comparacion de Medias(Función en R para obtener medias marginales estimadas y compararlas estadísticamente.)

```{r}
library(lme4)
modelo <- lme4::lmer(formula = op_84 ~ riego + geno + riego*geno + (1|bloque), data = fb)
anova(modelo)

library(emmeans)
library(multcomp)

cm1 <- emmeans(modelo, ~ geno | riego) %>% 
  cld(letters = letters, reversed = TRUE)
cm1

cm2 <- emmeans(modelo, ~ riego | geno) %>% 
  cld(letters = letters, reversed = TRUE)
cm2

cm3 <- emmeans(modelo, ~ riego * geno) %>% 
  cld(letters = letters, reversed = TRUE)
cm3
```

```{r}
# Convertir 'cm2' en un dataframe y renombrar la columna de significancia
dtcm <- as.data.frame(cm2) %>% 
  rename(sig = ".group")

# Crear el gráfico de barras
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  geom_text(aes(label = sig, y = emmean),
            position = position_dodge(width = 0.9),
            vjust = -0.5) +  # Ajustar posición vertical de las letras
  labs(x = "Genotipo", y = "op_84", fill = "Riego") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle("Gráfico de barras: op_84 por genotipo y riego") +
  scale_y_reverse()  # Invertir el eje Y



```

## variable 2 rwc_84 
### Modelo Lineal(Método estadístico que describe la relación lineal entre una variable dependiente y una o más variables independientes.)

```{r}
modelo <- aov(formula = rwc_84 ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)
```

### Boxplot( Gráfico que resume la distribución de datos usando la mediana, los cuartiles y valores atípicos.)

```{r}
ggplot(fb, aes(x = geno, y = op_84, colour = riego)) +
  geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Boxplot con interacción de niveles de riego y genotipo", 
       x = "Interacción Riego y Genotipo",
       y = "Valor de la variable respuesta") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Modelo Lineal Mixto para rwc_84(Modelo que incluye tanto efectos fijos (constantes) como efectos aleatorios (variables por grupo o individuo).)

```{r}
library(lme4)
modelo <- lmer(formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque), data = fb)
anova(modelo)
plot(modelo)

ol <- boxplot(rwc_84 ~ riego * geno, data = fb)
ol

library(inti)
model <- remove_outliers(data = fb,
                         formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque),
                         plot_diag = TRUE)
model
```

### Comparacion de Medias(Pruebas estadísticas para identificar diferencias significativas entre medias de diferentes grupos.)

```{r}
modelo <- aov(formula =rwc_84 ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
```

### Duncan (Prueba de comparación de medias que ajusta el nivel de significancia para múltiples comparaciones, menos conservadora que Tukey.)

```{r}
library(agricolae)
library(agricolae)
library(agricolae)

# Ejecutar el test de Duncan
duncan_riego_geno <- duncan.test(modelo, trt = c("riego","geno"), group = TRUE)
print(duncan_riego_geno)

# Verificar si existen grupos formados
if (!is.null(duncan_riego_geno$groups)) {
  # Modificar las etiquetas de la columna de grupos para mostrar solo las primeras 2 letras
  duncan_riego_geno$groups <- duncan_riego_geno$groups %>%
    dplyr::mutate(groups = substr(groups, 1, 2))  # Mostrar solo las 3 primeras letras de la etiqueta
  
  # Graficar
  plot(duncan_riego_geno)
} else {
  cat("No se puede graficar, no hay grupos formados.")
}
```

###Tukey (Prueba de comparación de medias que controla el error en múltiples comparaciones, útil en ANOVA.)

```{r}
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)
print(tukey_result)

# Verificar si existen grupos formados
if (!is.null(tukey_result$groups)) {
  # Modificar los indicadores de diferenciación para mostrar solo las primeras 2 letras
  tukey_result$groups$groups <- substr(tukey_result$groups$groups, 1, 2)
  
  # Graficar
  plot(tukey_result)
} else {
  cat("No se puede graficar, no hay grupos formados.")
}
```

```{r}
tukey_result
library(tidyverse)

grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
```

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)

ggplot(grupos, aes(x = geno, y = rwc_84 , fill = riego)) + 
  geom_bar(stat = "identity", position = "dodge", color = "black") + 
  labs(x = "Genotipo", y = "spad_29", fill = "Riego") + 
  theme_minimal() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  ggtitle("Gráfico de barras: rwc_84 por genotipo y riego") +
  geom_text(aes(label = substr(geno, 1, 2)),  # Mostrar solo las primeras 2 letras de la columna 'geno'
            position = position_dodge(0.9), 
            vjust = -0.5)  # Ajusta la posición vertical de las letras
```

### Emmeans: Comparacion de Medias (Función en R para obtener medias marginales estimadas y compararlas estadísticamente.)

```{r}
library(lme4)
modelo <- lme4::lmer(formula = rwc_84 ~ riego + geno + riego*geno + (1|bloque), data = fb)
anova(modelo)

library(emmeans)
library(multcomp)

cm1 <- emmeans(modelo, ~ geno | riego) %>% 
  cld(letters = letters, reversed = TRUE)
cm1

cm2 <- emmeans(modelo, ~ riego | geno) %>% 
  cld(letters = letters, reversed = TRUE)
cm2

cm3 <- emmeans(modelo, ~ riego * geno) %>% 
  cld(letters = letters, reversed = TRUE)
cm3
```

```{r}
# Convertir 'cm2' en un dataframe y renombrar la columna de significancia
dtcm <- as.data.frame(cm2) %>% 
  rename(sig = ".group")

# Crear el gráfico de barras
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  geom_text(aes(label = sig, y = emmean),
            position = position_dodge(width = 0.9),
            vjust = -0.5) +  # Ajustar posición vertical de las letras
  labs(x = "Genotipo", y = "rwc_84", fill = "Riego") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle("Gráfico de barras: rwc_84 por genotipo y riego") +
  scale_y_reverse()  # Invertir el eje Y



```

###Grafico

```{r}
library(ggplot2)
library(emmeans)
modelo <- lm(lfa ~ bloque + riego + geno + riego * geno, data = fb)
cm1 <- emmeans(modelo, ~ geno | riego)
cm1_df <- as.data.frame(cm1)
ggplot(cm1_df, aes(x = geno, y = emmean, color = riego, group = riego)) +
  geom_line() +
  geom_point(size = 3) +  
  geom_text(aes(label = round(emmean, 2)),  
            vjust = -0.5, size = 3.5) +  
  labs(x = "Genotipo", y = "Media marginal ajustada", color = "Riego") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle("Medias marginales ajustadas por genotipo y riego")
```

```{r}
# Cargar los paquetes necesarios
library(tidyverse)
library(corrplot)

# Asegurarse de que 'fb' esté cargado antes de proceder
# fb <- read.csv("ruta/al/archivo.csv")  # Cambia la ruta al archivo

# Seleccionar solo columnas numéricas manualmente y eliminar filas con NA
fb_clean <- fb %>%
  select_if(is.numeric) %>%  # Selecciona solo columnas numéricas
  drop_na()                  # Elimina filas con NA restantes

# Verificar si hay suficientes columnas numéricas para calcular la correlación
if (ncol(fb_clean) > 1) {
  # Calcular la matriz de correlación
  cor_matrix <- cor(fb_clean, use = "complete.obs")
  
  # Imprimir la matriz de correlación
  print(cor_matrix)
  
  # Visualizar la matriz de correlación
  corrplot(cor_matrix, method = "circle")
} else {
  cat("No hay suficientes columnas numéricas o datos completos para calcular la correlación.\n")
}

```

```{r}
# Análisis multivariado
str(fb)
```

```{r}
# Instalar el paquete psych si aún no está instalado
if (!require(psych)) install.packages("psych")

# Cargar los paquetes necesarios
library(tidyverse)
library(psych)
library(corrplot)

# Seleccionar solo las columnas numéricas
fb_clean <- fb %>%
  select_if(is.numeric)

# Generar la matriz de correlación usando pairs.panels
pairs.panels(
  fb_clean,
  hist.col = "red",
  pch = 21,
  stars = TRUE,
  scale = FALSE,
  lm = TRUE
)
```

###PCA: Annalists de componentes Principales (Técnica que reduce la dimensionalidad de datos identificando las variables principales que explican más variabilidad.)

```{r}
# Cargar la librería FactoMineR
library(FactoMineR)
library(dplyr)  # Para la manipulación de datos
library(ggplot2) # Para graficar

# Agrupar y resumir los datos
mv <- fb %>%
  group_by(riego, geno) %>%
  summarise(across(where(is.numeric), ~ mean(., na.rm = TRUE), .names = "mean_{col}")) %>%
  ungroup()  # Desagrupar los datos después de resumir

# Realizar el PCA
pca_result <- PCA(mv, scale.unit = TRUE, quali.sup = c(1:4), graph = FALSE)

# Graficar los individuos
p1 <- plot(pca_result, habillage = 1)

# Graficar las variables
p2 <- plot(pca_result, choix = "var")

# Combinar las gráficas en una sola
library(gridExtra)  # Para combinar gráficos
gridExtra::grid.arrange(p1, p2, nrow = 1)


```

```{r}

if(!requireNamespace("googlesheets4", quietly = TRUE)) install.packages("googlesheets4")
if(!requireNamespace("googledrive", quietly = TRUE)) install.packages("googledrive")
if(!requireNamespace("emmeans", quietly = TRUE)) install.packages("emmeans")
if(!requireNamespace("multcomp", quietly = TRUE)) install.packages("multcomp")

library(googlesheets4)
library(googledrive)
library(emmeans)
library(multcomp)

gs4_auth()
drive_auth()

source('https://inkaverse.com/setup.r')

cat("Project: ", getwd(), "\n")


```

```{r}
session_info()
```
